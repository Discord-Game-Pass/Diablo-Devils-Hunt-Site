{% extends "base.jinja2" %}


{% block ogp %}
    <meta property="og:title" content="DuckHunt"/>
    <meta property="og:type" content="profile"/>
    <meta property="og:url" content="{{ canonical_domain_uri }}{{ request.get_full_path() }}"/>
    <meta property="og:image" content="{{ canonical_domain_uri }}{{ static("botdata/Pixel_Ducc_Globloxmen.png") }}"/>
    <meta property="og:site_name" content="DuckHunt Discord V4"/>
    <meta property="profile:username" content="{{ current_user.name }}#{{ current_user.discriminator }}"/>
    <meta property="profile:first_name" content="{{ current_user.name }}"/>
    <meta property="profile:last_name" content="{{ current_user.discriminator }}"/>
    <meta property="og:description"
          content="Discord player {{ current_user.name }}#{{ current_user.discriminator }} statistics on #{{ channel.name }}."/>
{% endblock %}

{% block title %}
    {{ _("DuckHunt Discord - %(current_user_name)s#%(current_user_discriminator)s : #%(channel_name)s", channel_name=channel.name, current_user_name=current_user.name, current_user_discriminator=current_user.discriminator) }}
{% endblock %}

{% block metadesc %}
    <meta name="description"
          content="Player {{ current_user.name }}#{{ current_user.discriminator }} statistics on #{{ channel.name }}.">
{% endblock %}

{% block head %}
    {% javascript 'highcharts' %}
    <script src="{{ static('public/js/JsBarcode.all.min.js') }}"></script>
{% endblock %}

{% block container %}
    <div class="container text-light" itemscope itemtype="https://schema.org/Person">

        <h1>{{ _("%(current_user_name)s#%(current_user_discriminator)s on Duck Hunt", current_user_name=current_user.name, current_user_discriminator=current_user.discriminator) }}</h1>

        <nav aria-label="breadcrumb" style="--bs-breadcrumb-divider: '>'" class="background-grey rounded">
            <ol class="breadcrumb p-2" itemscope itemtype="https://schema.org/BreadcrumbList">
                <li class="breadcrumb-item" itemprop="itemListElement" itemscope
                    itemtype="https://schema.org/ListItem">
                    <a itemtype="https://schema.org/WebPage" class="text-decoration-none"
                       itemprop="item" href="{{ canonical_domain_uri }}{{ url("guilds") }}">
                        <span itemprop="name" class="text-blurple">{{ _("Guilds") }}</span></a>
                    <meta itemprop="position" content="1"/>
                </li>
                <li class="breadcrumb-item" itemprop="itemListElement" itemscope
                    itemtype="https://schema.org/ListItem">
                    <a itemtype="https://schema.org/WebPage" class="text-decoration-none"
                       itemprop="item" href="{{ canonical_domain_uri }}{{ url("guild", pk=channel.guild_id) }}">
                        <span itemprop="name" class="text-blurple text-decoration-none">{{ channel.guild.name }}</span></a>
                    <meta itemprop="position" content="2"/>
                </li>
                <li class="breadcrumb-item" itemprop="itemListElement" itemscope
                    itemtype="https://schema.org/ListItem">
                    <a itemtype="https://schema.org/WebPage" class="text-decoration-none"
                       itemprop="item" href="{{ canonical_domain_uri }}{{ url("channel", pk=channel.pk) }}">
                        <span itemprop="name" class="text-blurple text-decoration-none">#{{ channel.name }}</span></a>
                    <meta itemprop="position" content="3"/>
                </li>
                <li class="breadcrumb-item active" itemprop="itemListElement" itemscope
                    itemtype="https://schema.org/ListItem">
                    <span itemprop="name"
                          class="text-light text-decoration-none">{{ current_user.name }}#{{ current_user.discriminator }}</span>
                    <meta itemprop="position" content="4"/>
                </li>
            </ol>
        </nav>

        <div class="h2">üìà {{ _("General statistics") }}</div>

        <p itemprop="description">
            {% trans player_givebacks=player.givebacks + 1, player_experience=intcomma(player.experience), total_ducks_killed=intcomma(player.total_ducks_killed) %}
                <span class="statistic">{{ player_givebacks }}</span> days played,
                <span class="statistic">{{ player_experience }}</span> experience points. ({{ total_ducks_killed }} ducks killed.)
            {% endtrans %}
        </p>

        {% if current_user.trophys|length %}
            <div class="h2">üèÜÔ∏è {{ _("Trophies") }}</div>
            <ul>
                {% for trophy, unlocked in current_user.trophys.items() %}
                    {% if unlocked %}
                        <li itemprop="award">{{ _(trophys[trophy]['name']) }}: {{ _(trophys[trophy]['description']) }}</li>
                    {% endif %}
                {% endfor %}
            </ul>
        {% endif %}

        {% if player.unlocked_achievements|length %}
            <div class="h2">‚ú® {{ _("Achievements") }}</div>

            <ul>
                {% for achievement in player.unlocked_achievements %}
                    <li itemprop="award">{{ _(achievements[achievement]['name']) }}: {{ _(achievements[achievement]['description']) }}</li>
                {% endfor %}
            </ul>
        {% endif %}

        {% if player.prestige >= 1 %}
            <div class="h2">üí† {{ _("Prestige") }}</div>
            {{ _("You've got to prestige level %(player_prestige)s, and claimed %(player_prestige_dailies)s prestige
            dailies", player_prestige_dailies=player.prestige_dailies, player_prestige=player.prestige) }}
        {% endif %}


        {% if player.killed|length %}
            <h2>ü¶Ü {{ _("Ducks killed") }}</h2>
            <div id="chart-ducks-killed"></div>
        {% endif %}

        {% if player.best_times|length %}
            <div class="h2">üî´ {{ _("Shooting range") }}</div>
            <div id="chart-best-times"></div>
        {% endif %}

        <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4 justify-content-around">

            {% if player.hugged|length %}
                <div class="col">
                    <div class="h2">ü§ó {{ _("Ducks hugged") }}</div>
                    <div id="chart-ducks-hugged"></div>
                </div>
            {% endif %}

            {% if player.hurted|length %}
                <div class="col">
                    <div class="h2">üöëÔ∏è {{ _("Ducks hurt") }}</div>
                    <div id="chart-ducks-hurt"></div>
                </div>
            {% endif %}

            {% if player.frightened|length %}
                <div class="col">
                    <h2>üò± {{ _("Ducks frightened") }}</h2>
                    <div id="chart-ducks-frightened"></div>
                </div>
            {% endif %}
        </div>

        {% set powerups = player.get_only_active_powerups() %}
        {% if powerups|length or player.bought_items|length or player.found_items|length %}
            <div class="h2">üéí {{ _("Backpack") }}</div>

            <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4 justify-content-around">
                {% if powerups|length %}
                    <div class="card text-dark col">
                        <div class="card-body">
                            <table class="table">
                                <thead>
                                <tr style="border-bottom: hidden;">
                                    <th colspan="2"><h2 class="text-center">{{ _("Duck Hunt Shop") }}</h2><br/><br/>
                                    </th>
                                </tr>
                                <tr>
                                    <th>
                                        <span class="text-muted fw-lighter">{{ _("Invoice No.") }}</span><br/>
                                        <span class="fw-lighter fs-6" itemprop="identifier">{{ current_user.pk }}</span><br/><br/>
                                    </th>
                                    <th class="text-end">
                                        <span class="text-muted fw-lighter">{{ _("Payment Date.") }}</span><br/>
                                        <span class="fw-lighter fs-6">{{ player_last_giveback }}</span><br/><br/>
                                    </th>
                                </tr>
                                </thead>
                                <tbody>
                                {% if powerups.get('ap_ammo', False) %}
                                    <tr>
                                        <td>{{ _("Armor Piercing ammo") }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['ap_ammo'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('explosive_ammo', False) %}
                                    <tr>
                                        <td>{{ _("Explosive ammo") }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['explosive_ammo'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('grease', False) %}
                                    <tr>
                                        <td>{{ _("Gun grease") }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['grease'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('sight', False) %}
                                    <tr>
                                        <td>{{ _("Sight") }}</td>
                                        <td class="text-end">{{ _("%(powerups__sight__)s shots", powerups__sight__=powerups['sight']) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('detector', False) %}
                                    <tr>
                                        <td>{{ _("Infrared detector") }}</td>
                                        <td class="text-end">{{ _("%(powerups__detector__)s misses", powerups__detector__=powerups['detector']) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('silencer', False) %}
                                    <tr>
                                        <td>{{ _("Silencer") }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['silencer'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('clover', False) %}
                                    <tr>
                                        <td>{{ _("Clover: %(player_active_powerups__clover_exp__)s exp", player_active_powerups__clover_exp__=player.active_powerups['clover_exp']) }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['clover'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('sunglasses', False) %}
                                    <tr>
                                        <td>{{ _("Sunglasses") }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['sunglasses'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('coat', False) %}
                                    <tr>
                                        <td>{{ _("%(player_get_current_coat_color)s rain coat", player_get_current_coat_color=player.get_current_coat_color().value[0]) }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['coat'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('licence', False) %}
                                    <tr>
                                        <td>{{ _("Licence to kill") }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['licence'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('reloader', False) %}
                                    <tr>
                                        <td>{{ _("Automatic reloader") }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['reloader'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('kill_licence', False) %}
                                    <tr>
                                        <td>{{ _("Licence to kill") }}</td>
                                        <td class="text-end">{{ _("%(show_timestamp)s left", show_timestamp=show_timestamp(powerups['kill_licence'])) }}</td>
                                    </tr>
                                {% endif %}
                                {% if powerups.get('homing_bullets', False) %}
                                    <tr>
                                        <td>{{ _("Homing bullets") }}</td>
                                        <td class="text-end">{{ powerups['homing_bullets'] }} ‚ú®</td>
                                    </tr>
                                {% endif %}
                                </tbody>
                                <tfoot>
                                <tr style="border-bottom: hidden;">
                                    <td class="text-end">{{ _("Total:") }}</td>
                                    <td class="text-end fw-bolder">{{ _("%(powerups)s items", powerups=powerups|length) }}</td>
                                </tr>
                                <tr style="border-bottom: hidden;">
                                    <td class="text-center" colspan="2">
                                        <br/><br/>
                                        {{ _("Thanks for buying in the shop.<br/>
                                        We hope to see you soon.<br/>
                                        Thanks for spending %(intcomma)s exp in
                                        there", intcomma=intcomma(player.spent_experience)) }}<br/><br/><br/>

                                        <svg class="barcode"
                                             jsbarcode-format="auto"
                                             jsbarcode-value="{{ barcode }}"
                                             jsbarcode-textmargin="0"
                                             jsbarcode-fontoptions="bold"
                                             jsbarcode-displayValue="false">
                                        </svg>

                                    </td>
                                </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                {% endif %}
                <div class="col align-self-center">
                    {% if player.bought_items|length %}
                        <div class="h5">{{ _("Purchased and used...") }}</div>
                        <ul>
                            {% for item, qty in player.bought_items.items() %}
                                <li>{{ qty }} {{ item.replace('_', ' ').capitalize() }}</li>
                            {% endfor %}
                        </ul>
                        <br/>
                    {% endif %}
                    {% if player.found_items|length %}
                        {% if player.get_found_trash()|length %}
                            <div class="h5">{{ _("Trash found in bushes") }}</div>
                            <ul>
                                {% for item, qty in player.get_found_trash().items() %}
                                    <li>{{ qty }} {{ item.replace('took_trash', '').replace('_', ' ').capitalize() }}</li>
                                {% endfor %}
                            </ul>
                        {% endif %}
                        {% if player.get_found_useful(left=False)|length %}
                            <div class="h5">{{ _("Items took from bushes") }}</div>
                            <ul>
                                {% for item, qty in player.get_found_useful(left=False).items() %}
                                    <li>{{ qty }} {{ item.replace('took_', '').replace('_', ' ').capitalize() }}</li>
                                {% endfor %}
                            </ul>
                        {% endif %}
                        {% if player.get_found_useful(left=True)|length %}
                            <div class="h5">{{ _("Items left in bushes") }}</div>
                            <ul>
                                {% for item, qty in player.get_found_useful(left=True).items() %}
                                    <li>{{ qty }} {{ item.replace('left_', '').replace('_', ' ').capitalize() }}</li>
                                {% endfor %}
                            </ul>
                        {% endif %}
                    {% endif %}
                </div>
            </div>

        {% endif %}


        <div class="h2">üéØ {{ _("Shooting stats") }}</div>
        <div id="chart-shots"></div>

        {% if player.shooting_stats.get('thrown_clovers', 0) > 0 or player.shooting_stats.get('cops_seen', 0) > 0 %}
            <div class="h2">üëÆ {{ _("Cops and fines") }}</div>
            {% if player.shooting_stats.get('thrown_clovers', 0) > 0 %}
                <p>
                    {{ _("%(current_user_name)s threw %(thrown_clovers)s clovers on the
                    ground...
                    In front of a cop, getting fined a total
                    of %(thrown_clovers_exp)s exp in
                    total for littering.", thrown_clovers_exp=13 * player.shooting_stats.get('thrown_clovers', 0), current_user_name=current_user.name, thrown_clovers=player.shooting_stats.get('thrown_clovers', 0)) }}
                </p>
            {% endif %}
            {% if player.shooting_stats.get('cops_seen', 0) > 0 %}
                <p>
                    {{ _("When getting ready to throw a clover on the ground, %(current_user_name)s saw a cop farther down
                    the street.
                    They chickened out and left without getting a fine %(cops_seen)s
                    times.", current_user_name=current_user.name, cops_seen=player.shooting_stats.get('cops_seen', 0)) }}
                </p>
            {% endif %}
        {% endif %}

        <div class="h2">üõ∏ {{ _("Misc") }}</div>
        <p>
            {{ _("<span itemprop=\"name\">%(current_user_name)s#%(current_user_discriminator)s</span> used %(player_shooting_stats_get)s bullets", current_user_name=current_user.name, current_user_discriminator=current_user.discriminator, player_shooting_stats_get=player.shooting_stats.get('bullets_used', 0)) }}
            {% if player.shooting_stats.get('homing_kills', 0) %}{{ _("(of which
                %(homing_kills)s were homing)", homing_kills=player.shooting_stats.get('homing_kills', 0)) }}{% endif %}
            {% trans reloads=player.shooting_stats.get('reloads', 0), missed=player.shooting_stats.get('missed', 0), killed=player.shooting_stats.get('killed', 0), murdered=player.shooting_stats.get('murders', 0) %}
                and {{ reloads }} magazines. They missed their target {{ missed }} times, killed someone {{ killed }}
                times, and murdered {{ murdered }} players.
            {% endtrans %}
        </p>

        {% if player.shooting_stats.get('suicides', 0) %}
            <p>
                {{ _("They killed themselves %(suicides)s times.", suicides=player.shooting_stats.get('suicides', 0)) }}
            </p>
        {% endif %}

        {% if player.shooting_stats.get('got_killed', 0) %}
            <p>
                {{ _("They got killed %(got_killed)s times", got_killed=player.shooting_stats.get('got_killed', 0)) }}
                {% if player.shooting_stats.get('brains_eaten', 0) %},
                    {% trans eaten=player.shooting_stats.get('brains_eaten', 0), revives=player.shooting_stats.get('revives', 0), max_brains_eaten_at_once=player.shooting_stats.get('max_brains_eaten_at_once', 0) %}
                        and had to eat {{ eaten }} brains to revive themselves ({{ revives }} times). They were really
                        hungry once when they ate {{ max_brains_eaten_at_once }} brains at once.
                    {% endtrans %}
                {% endif %}
            </p>
        {% endif %}

        {% if player.shooting_stats.get('useless_revives', 0) %}
            <p>
                {{ _("They also tried reviving themselves %(useless_revives)s times, but
                they were already alive.", useless_revives=player.shooting_stats.get('useless_revives', 0)) }}
            </p>
        {% endif %}

        {% if player.shooting_stats.get('autoreloads', 0) or player.shooting_stats.get('failed_autoreloads', 0) %}
            <p>
                {% trans current_user_name=current_user.name, autoreloads=player.shooting_stats.get('autoreloads', 0), failed_autoreloads=player.shooting_stats.get('failed_autoreloads', 0) %}
                    {{ current_user_name }}'s gun was reloaded automatically {{ autoreloads }} times
                    (and the autoreloader failed {{ failed_autoreloads }} times, because they had no more magazines.)
                {% endtrans %}
            </p>
        {% endif %}

        {{ _("They have %(player_bullets)s bullets in their gun, and %(player_magazines)s magazines in their backpack.", player_magazines=player.magazines, player_bullets=player.bullets) }}

        <script>
            Highcharts.setOptions({
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false,
                    type: 'pie'
                },
                title: {
                    text: ''
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %'
                        }
                    }
                },
            });
            {% if player.killed|length %}
                Highcharts.chart('chart-ducks-killed', {
                    chart: {
                        type: 'column'
                    },
                    tooltip: {
                        pointFormat: 'Killed: {point.y} ducks'
                    },
                    xAxis: {
                        categories: {{ titleize(player.sorted_killed().keys())|tojson }},
                    },
                    legend: {
                        enabled: false
                    },
                    series: [{
                        name: 'Killed',
                        colorByPoint: true,
                        data: {{ player.sorted_killed().values()|list|tojson }},
                        colors: {{ ducks_names_to_colors(player.sorted_killed().keys())|tojson }}
                    }{#, {
                    name: "Best Times",
                    colorByPoint: true,
                    data: {{ values_from_keys(player.sorted_killed().keys(), player.best_times)|tojson }},
                    colors: {{ ducks_names_to_colors(player.sorted_killed().keys())|tojson }}
                } #}
                    ]
                });
            {% endif %}

            {% if player.hugged|length %}
                Highcharts.chart('chart-ducks-hugged', {
                    tooltip: {
                        pointFormat: 'Hugged: {point.y} (<b>{point.percentage:.1f}%</b>)'
                    },
                    legend: {
                        enabled: false
                    },
                    series: [{
                        name: 'Hugged',
                        colorByPoint: true,
                        data: {{ dict_to_highcharts(player.hugged) }},
                        colors: {{ ducks_names_to_colors(player.hugged)|tojson }}
                    }]
                });
            {% endif %}

            {% if player.hurted|length %}
                Highcharts.chart('chart-ducks-hurt', {
                    tooltip: {
                        pointFormat: 'Hurt: {point.y} (<b>{point.percentage:.1f}%</b>)'
                    },
                    legend: {
                        enabled: false
                    },
                    series: [{
                        name: 'Hurt',
                        colorByPoint: true,
                        data: {{ dict_to_highcharts(player.hurted) }},
                        colors: {{ ducks_names_to_colors(player.hurted)|tojson }}
                    }]
                });
            {% endif %}

            {% if player.frightened|length %}
                Highcharts.chart('chart-ducks-frightened', {
                    tooltip: {
                        pointFormat: 'Frightened: {point.y} (<b>{point.percentage:.1f}%</b>)'
                    },
                    legend: {
                        enabled: false
                    },
                    series: [{
                        name: 'Frightened',
                        colorByPoint: true,
                        data: {{ dict_to_highcharts(player.frightened) }},
                        colors: {{ ducks_names_to_colors(player.frightened)|tojson }}
                    }]
                });
            {% endif %}

            {% if player.best_times|length %}

                Highcharts.chart('chart-best-times', {
                    chart: {
                        type: 'column'
                    },
                    title: {
                        text: 'Best times'
                    },
                    yAxis: {
                        title: {
                            text: 'Time to kill (seconds)',
                            align: 'high'
                        },
                    },
                    xAxis: {
                        labels: {
                            enabled: false,
                        }
                    },
                    tooltip: {
                        valueSuffix: ' seconds'
                    },
                    plotOptions: {
                        bar: {
                            dataLabels: {
                                enabled: true
                            }
                        }
                    },
                    legend: {
                        enabled: false
                    },
                    series: [{
                        name: 'Best Times',
                        colorByPoint: true,
                        data: {{ dict_to_highcharts(player.best_times, select_first=False, reverse=True) }},
                        dataLabels: {
                            enabled: true,
                            format: '{point.name}: {point.y:.1f}s'
                        },
                        colors: {{ ducks_names_to_colors(player.best_times, reverse=True)|tojson }}
                    }]
                });
            {% endif %}

            Highcharts.chart('chart-shots', {
                chart: {
                    type: 'bar'
                },
                title: {
                    text: 'Shots...'
                },
                yAxis: {
                    title: {
                        text: 'Count',
                        align: 'high'
                    },
                },
                xAxis: {
                    labels: {
                        enabled: false,
                    }
                },
                plotOptions: {
                    bar: {
                        dataLabels: {
                            enabled: true
                        }
                    }
                },
                legend: {
                    enabled: false
                },
                series: [{
                    name: 'Shots count',
                    colorByPoint: true,
                    data: {{ shots_chart_data|tojson }},
                    dataLabels: {
                        enabled: true,
                        format: '{point.name}: {point.y} shots'
                    },
                }]
            });

        </script>
        <script>JsBarcode(".barcode").init();</script>
        <h2>{{ _("Back to <a href=\"%(url)s\">the #%(channel_name)s discord chanel</a>", url=url("channel", pk=channel.pk), channel_name=channel.name) }}</h2>
    </div>
{% endblock %}