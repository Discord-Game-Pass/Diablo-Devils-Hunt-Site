# Generated by Django 3.1.7 on 2021-02-28 10:58

import botdata.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_enumfield.db.fields


class Migration(migrations.Migration):

    replaces = [('botdata', '0001_initial'), ('botdata', '0002_auto_20201212_0140'), ('botdata', '0003_auto_20201212_0149'), ('botdata', '0004_auto_20201212_1925'), ('botdata', '0005_auto_20201212_1926'), ('botdata', '0006_auto_20201212_2023'), ('botdata', '0007_auto_20201213_1213'), ('botdata', '0008_auto_20201213_1330'), ('botdata', '0009_auto_20201214_0856'), ('botdata', '0010_auto_20201230_1110'), ('botdata', '0011_auto_20210101_1338'), ('botdata', '0012_auto_20210105_1033'), ('botdata', '0013_auto_20210105_1035'), ('botdata', '0014_auto_20210105_1035'), ('botdata', '0015_auto_20210105_1037'), ('botdata', '0016_auto_20210105_1037'), ('botdata', '0017_discorduser_votes'), ('botdata', '0018_discorduser_boss_kills'), ('botdata', '0019_auto_20210214_1719'), ('botdata', '0020_remove_discorduser_votes'), ('botdata', '0021_discorduser_votes'), ('botdata', '0022_auto_20210214_2107'), ('botdata', '0023_botlist_vote'), ('botdata', '0024_auto_20210214_2201'), ('botdata', '0025_auto_20210214_2214'), ('botdata', '0026_auto_20210215_1330'), ('botdata', '0027_auto_20210215_1332'), ('botdata', '0028_botlist_bot_verified'), ('botdata', '0029_discordguild_channel_disabled_message')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DiscordGuild',
            fields=[
                ('discord_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('prefix', models.CharField(blank=True, max_length=20, null=True)),
                ('vip', models.BooleanField(default=False)),
                ('language', models.CharField(default='en', max_length=6)),
                ('first_seen', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ('channel_disabled_message', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'guilds',
            },
        ),
        migrations.CreateModel(
            name='DiscordUser',
            fields=[
                ('discord_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('discriminator', models.CharField(max_length=4)),
                ('times_ran_example_command', models.IntegerField(default=0)),
                ('inventory', models.JSONField(blank=True, default=list)),
                ('trophys', models.JSONField(blank=True, default=dict)),
                ('ping_friendly', models.BooleanField(default=True)),
                ('language', models.CharField(default='en', max_length=6)),
                ('first_use', models.BooleanField(default=True)),
                ('access_level_override', django_enumfield.db.fields.EnumField(default=50, enum=botdata.models.AccessLevel)),
                ('first_seen', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ('boss_kills', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='DiscordChannel',
            fields=[
                ('discord_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('webhook_urls', models.JSONField(blank=True, default=list)),
                ('api_key', models.UUIDField(blank=True, null=True)),
                ('use_webhooks', models.BooleanField(default=True)),
                ('use_emojis', models.BooleanField(default=True)),
                ('enabled', models.BooleanField(db_index=True, default=False)),
                ('allow_global_items', models.BooleanField(default=True)),
                ('tax_on_user_send', models.SmallIntegerField(default=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('mentions_when_killed', models.BooleanField(default=True)),
                ('show_duck_lives', models.BooleanField(default=True)),
                ('kill_on_miss_chance', models.SmallIntegerField(default=3)),
                ('duck_frighten_chance', models.SmallIntegerField(default=7)),
                ('clover_min_experience', models.SmallIntegerField(default=1)),
                ('clover_max_experience', models.SmallIntegerField(default=10)),
                ('base_duck_exp', models.SmallIntegerField(default=10)),
                ('per_life_exp', models.SmallIntegerField(default=7)),
                ('ducks_per_day', models.SmallIntegerField(default=96)),
                ('night_start_at', models.IntegerField(default=0)),
                ('night_end_at', models.IntegerField(default=0)),
                ('spawn_weight_normal_ducks', models.SmallIntegerField(default=100)),
                ('spawn_weight_super_ducks', models.SmallIntegerField(default=15)),
                ('spawn_weight_baby_ducks', models.SmallIntegerField(default=7)),
                ('spawn_weight_prof_ducks', models.SmallIntegerField(default=10)),
                ('spawn_weight_ghost_ducks', models.SmallIntegerField(default=1)),
                ('spawn_weight_moad_ducks', models.SmallIntegerField(default=5)),
                ('spawn_weight_mechanical_ducks', models.SmallIntegerField(default=1)),
                ('spawn_weight_armored_ducks', models.SmallIntegerField(default=3)),
                ('spawn_weight_golden_ducks', models.SmallIntegerField(default=1)),
                ('spawn_weight_plastic_ducks', models.SmallIntegerField(default=6)),
                ('spawn_weight_kamikaze_ducks', models.SmallIntegerField(default=6)),
                ('spawn_weight_night_ducks', models.SmallIntegerField(default=100)),
                ('spawn_weight_sleeping_ducks', models.SmallIntegerField(default=5)),
                ('ducks_time_to_live', models.SmallIntegerField(default=660)),
                ('super_ducks_min_life', models.SmallIntegerField(default=2)),
                ('super_ducks_max_life', models.SmallIntegerField(default=7)),
                ('guild', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to='botdata.discordguild')),
                ('first_seen', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'channels',
            },
        ),
        migrations.CreateModel(
            name='DiscordMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_level', django_enumfield.db.fields.EnumField(default=50, enum=botdata.models.AccessLevel)),
                ('guild', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='botdata.discordguild')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='botdata.discorduser')),
            ],
            options={
                'db_table': 'members',
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prestige', models.SmallIntegerField(default=8)),
                ('prestige_last_daily', models.DateTimeField(auto_now_add=True)),
                ('prestige_dailies', models.IntegerField(default=0)),
                ('active_powerups', botdata.models.DefaultDictJSONField()),
                ('shooting_stats', botdata.models.DefaultDictJSONField()),
                ('stored_achievements', botdata.models.DefaultDictJSONField(blank=True)),
                ('experience', models.BigIntegerField(db_index=True, default=0)),
                ('spent_experience', models.BigIntegerField(default=0)),
                ('givebacks', models.IntegerField(default=0)),
                ('found_items', botdata.models.DefaultDictJSONField()),
                ('bought_items', botdata.models.DefaultDictJSONField()),
                ('bullets', models.IntegerField(default=6)),
                ('magazines', models.IntegerField(default=2)),
                ('last_giveback', models.DateTimeField(auto_now_add=True)),
                ('best_times', botdata.models.DefaultDictJSONField(blank=True)),
                ('killed', botdata.models.DefaultDictJSONField(blank=True)),
                ('hugged', botdata.models.DefaultDictJSONField(blank=True)),
                ('hurted', botdata.models.DefaultDictJSONField(blank=True)),
                ('resisted', botdata.models.DefaultDictJSONField(blank=True)),
                ('frightened', botdata.models.DefaultDictJSONField(blank=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='botdata.discordchannel')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='botdata.discordmember')),
                ('weapon_sabotaged_by', models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='botdata.player')),
                ('first_seen', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'players',
            },
        ),
        migrations.CreateModel(
            name='BotList',
            fields=[
                ('key', models.CharField(help_text='The unique key to recognise the bot list', max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the bot list', max_length=128)),
                ('bot_url', models.URLField(help_text='URL for the main bot page')),
                ('auth', models.TextField(help_text='Token used to authenticate requests to/from the bot')),
                ('can_vote', models.BooleanField(default=True, help_text='Can people vote (more than once) on that list ?')),
                ('vote_url', models.URLField(blank=True, help_text='URL for an user to vote')),
                ('vote_every', models.DurationField(blank=True, help_text='How often can users vote ?', null=True)),
                ('check_vote_url', models.URLField(blank=True, help_text='URL the bot can use to check if an user voted recently')),
                ('check_vote_key', models.CharField(blank=True, default='voted', help_text='Key in the returned JSON to check for presence of vote', max_length=128)),
                ('check_vote_negate', models.BooleanField(default=True, help_text='Does the boolean says if the user has voted (True) or if he can vote (False) ?')),
                ('webhook_handler', models.CharField(choices=[('generic', 'generic'), ('top.gg', 'top.gg')], default='generic', help_text="What is the function that'll receive the request from the vote hooks", max_length=20)),
                ('webhook_authorization_header', models.CharField(blank=True, default='Authorization', help_text='Name of the header used to authenticate webhooks requests', max_length=20)),
                ('webhook_user_id_json_field', models.CharField(blank=True, default='id', help_text='Key that gives the user ID in the provided JSON', max_length=20)),
                ('webhook_auth', models.TextField(blank=True, help_text='Secret used for authentication of the webhooks messages if not the same the auth token')),
                ('post_stats_method', models.CharField(choices=[('POST', 'POST'), ('PATCH', 'PATCH')], default='POST', help_text='What HTTP method should be used to send the stats', max_length=10)),
                ('post_stats_url', models.URLField(blank=True, help_text='Endpoint that will receive statistics')),
                ('post_stats_server_count_key', models.CharField(blank=True, default='server_count', help_text='Name of the server count key in the statistics JSON', max_length=128)),
                ('post_stats_shard_count_key', models.CharField(blank=True, default='shard_count', help_text='Name of the shard count key in the statistics JSON', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('at', models.DateTimeField(auto_now_add=True)),
                ('multiplicator', models.IntegerField(default=1)),
                ('bot_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='botdata.botlist')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='botdata.discorduser')),
            ],
        ),
        migrations.AlterModelTable(
            name='botlist',
            table='botlist',
        ),
        migrations.AlterModelTable(
            name='vote',
            table='vote',
        ),
        migrations.AlterField(
            model_name='botlist',
            name='webhook_handler',
            field=models.CharField(choices=[('generic', 'generic'), ('top.gg', 'top.gg'), ('None', 'None')], default='generic', help_text="What is the function that'll receive the request from the vote hooks", max_length=20),
        ),
        migrations.AddField(
            model_name='botlist',
            name='bot_certified',
            field=models.BooleanField(default=False, help_text='Whether the bot was certified on that bot list'),
        ),
        migrations.AddField(
            model_name='botlist',
            name='embed_code',
            field=models.TextField(blank=True, help_text="Code to show this bot list embed. This HTML won't be escaped."),
        ),
        migrations.AddField(
            model_name='botlist',
            name='notes',
            field=models.TextField(blank=True, help_text='Informations about this bot list'),
        ),
        migrations.AlterField(
            model_name='botlist',
            name='post_stats_method',
            field=models.CharField(choices=[('POST', 'POST'), ('PATCH', 'PATCH'), ('None', 'None')], default='POST', help_text='What HTTP method should be used to send the stats', max_length=10),
        ),
        migrations.AddField(
            model_name='botlist',
            name='bot_verified',
            field=models.BooleanField(default=False, help_text='Whether the bot was verified by the bot list staff'),
        ),
    ]
